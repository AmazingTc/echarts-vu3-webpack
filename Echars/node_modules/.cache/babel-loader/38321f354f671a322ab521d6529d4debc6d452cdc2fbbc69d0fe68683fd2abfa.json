{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport * as echarts from 'echarts/core';\nimport { LegendComponent } from 'echarts/components';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { Lines3DChart, Scatter3DChart } from 'echarts-gl/charts';\nimport { GlobeComponent } from 'echarts-gl/components';\nimport { onMounted } from '@vue/runtime-core';\nexport default {\n  setup: function setup() {\n    function chartInit() {\n      echarts.use([LegendComponent, GlobeComponent, Lines3DChart, Scatter3DChart, CanvasRenderer]);\n      var ROOT_PATH = 'https://cdn.jsdelivr.net/gh/apache/echarts.apache.org/examples';\n      var chartDom = document.getElementById('main');\n      var myChart = echarts.init(chartDom);\n      var option;\n      $.getJSON(ROOT_PATH + '/data-gl/asset/data/flights.json', function (data) {\n        var airports = data.airports.map(function (item) {\n          return {\n            coord: [item[3], item[4]]\n          };\n        });\n        function getAirportCoord(idx) {\n          return [data.airports[idx][3], data.airports[idx][4]];\n        }\n        // Route: [airlineIndex, sourceAirportIndex, destinationAirportIndex]\n        var routesGroupByAirline = {};\n        data.routes.forEach(function (route) {\n          var airline = data.airlines[route[0]];\n          var airlineName = airline[0];\n          if (!routesGroupByAirline[airlineName]) {\n            routesGroupByAirline[airlineName] = [];\n          }\n          routesGroupByAirline[airlineName].push(route);\n        });\n        var pointsData = [];\n        data.routes.forEach(function (airline) {\n          pointsData.push(getAirportCoord(airline[1]));\n          pointsData.push(getAirportCoord(airline[2]));\n        });\n        var series = data.airlines.map(function (airline) {\n          var airlineName = airline[0];\n          var routes = routesGroupByAirline[airlineName];\n          if (!routes) {\n            return null;\n          }\n          return {\n            type: 'lines3D',\n            name: airlineName,\n            effect: {\n              show: true,\n              trailWidth: 2,\n              trailLength: 0.15,\n              trailOpacity: 1,\n              trailColor: 'rgb(30, 30, 60)'\n            },\n            lineStyle: {\n              width: 1,\n              color: 'rgb(50, 50, 150)',\n              // color: 'rgb(118, 233, 241)',\n              opacity: 0.1\n            },\n            blendMode: 'lighter',\n            data: routes.map(function (item) {\n              return [airports[item[1]].coord, airports[item[2]].coord];\n            })\n          };\n        }).filter(function (series) {\n          return !!series;\n        });\n        series.push({\n          type: 'scatter3D',\n          coordinateSystem: 'globe',\n          blendMode: 'lighter',\n          symbolSize: 2,\n          itemStyle: {\n            color: 'rgb(50, 50, 150)',\n            opacity: 0.2\n          },\n          data: pointsData\n        });\n        myChart.setOption({\n          legend: {\n            selectedMode: 'single',\n            left: 'left',\n            data: Object.keys(routesGroupByAirline),\n            orient: 'vertical',\n            textStyle: {\n              color: '#fff'\n            }\n          },\n          globe: {\n            environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\n            heightTexture: ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\n            displacementScale: 0.1,\n            displacementQuality: 'high',\n            baseColor: '#000',\n            shading: 'realistic',\n            realisticMaterial: {\n              roughness: 0.2,\n              metalness: 0\n            },\n            postEffect: {\n              enable: true,\n              depthOfField: {\n                enable: false,\n                focalDistance: 150\n              }\n            },\n            temporalSuperSampling: {\n              enable: true\n            },\n            light: {\n              ambient: {\n                intensity: 0\n              },\n              main: {\n                intensity: 0.1,\n                shadow: false\n              },\n              ambientCubemap: {\n                texture: ROOT_PATH + '/data-gl/asset/lake.hdr',\n                exposure: 1,\n                diffuseIntensity: 0.5,\n                specularIntensity: 2\n              }\n            },\n            viewControl: {\n              autoRotate: false\n            },\n            silent: true\n          },\n          series: series\n        });\n        window.addEventListener('keydown', function () {\n          series.forEach(function (series, idx) {\n            myChart.dispatchAction({\n              type: 'lines3DToggleEffect',\n              seriesIndex: idx\n            });\n          });\n        });\n      });\n      option && myChart.setOption(option);\n    }\n    onMounted(function () {\n      chartInit();\n    });\n  }\n};","map":{"version":3,"mappings":"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","names":["echarts","LegendComponent","CanvasRenderer","Lines3DChart","Scatter3DChart","GlobeComponent","onMounted","setup","chartInit","use","ROOT_PATH","chartDom","document","getElementById","myChart","init","option","$","getJSON","data","airports","map","item","coord","getAirportCoord","idx","routesGroupByAirline","routes","forEach","route","airline","airlines","airlineName","push","pointsData","series","type","name","effect","show","trailWidth","trailLength","trailOpacity","trailColor","lineStyle","width","color","opacity","blendMode","filter","coordinateSystem","symbolSize","itemStyle","setOption","legend","selectedMode","left","Object","keys","orient","textStyle","globe","environment","heightTexture","displacementScale","displacementQuality","baseColor","shading","realisticMaterial","roughness","metalness","postEffect","enable","depthOfField","focalDistance","temporalSuperSampling","light","ambient","intensity","main","shadow","ambientCubemap","texture","exposure","diffuseIntensity","specularIntensity","viewControl","autoRotate","silent","window","addEventListener","dispatchAction","seriesIndex"],"sourceRoot":"","sources":["C:\\Users\\44563\\Desktop\\Echars\\src\\components\\itemMap.vue"],"sourcesContent":["<template>\r\n    <div id=\"main\">\r\n\r\n    </div>\r\n</template>\r\n<script>\r\nimport * as echarts from 'echarts/core';\r\nimport { LegendComponent } from 'echarts/components';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\nimport { Lines3DChart, Scatter3DChart } from 'echarts-gl/charts';\r\nimport { GlobeComponent } from 'echarts-gl/components';\r\nimport { onMounted } from '@vue/runtime-core';\r\n\r\nexport default {\r\n    setup() {\r\n\r\n        function chartInit() {\r\n            echarts.use([\r\n                LegendComponent,\r\n                GlobeComponent,\r\n                Lines3DChart,\r\n                Scatter3DChart,\r\n                CanvasRenderer\r\n            ]);\r\n\r\n            var ROOT_PATH = 'https://cdn.jsdelivr.net/gh/apache/echarts.apache.org/examples';\r\n\r\n            var chartDom = document.getElementById('main');\r\n            var myChart = echarts.init(chartDom);\r\n            var option;\r\n\r\n            $.getJSON(ROOT_PATH + '/data-gl/asset/data/flights.json', function (data) {\r\n                var airports = data.airports.map(function (item) {\r\n                    return {\r\n                        coord: [item[3], item[4]]\r\n                    };\r\n                });\r\n                function getAirportCoord(idx) {\r\n                    return [data.airports[idx][3], data.airports[idx][4]];\r\n                }\r\n                // Route: [airlineIndex, sourceAirportIndex, destinationAirportIndex]\r\n                var routesGroupByAirline = {};\r\n                data.routes.forEach(function (route) {\r\n                    var airline = data.airlines[route[0]];\r\n                    var airlineName = airline[0];\r\n                    if (!routesGroupByAirline[airlineName]) {\r\n                        routesGroupByAirline[airlineName] = [];\r\n                    }\r\n                    routesGroupByAirline[airlineName].push(route);\r\n                });\r\n                var pointsData = [];\r\n                data.routes.forEach(function (airline) {\r\n                    pointsData.push(getAirportCoord(airline[1]));\r\n                    pointsData.push(getAirportCoord(airline[2]));\r\n                });\r\n                var series = data.airlines\r\n                    .map(function (airline) {\r\n                        var airlineName = airline[0];\r\n                        var routes = routesGroupByAirline[airlineName];\r\n                        if (!routes) {\r\n                            return null;\r\n                        }\r\n                        return {\r\n                            type: 'lines3D',\r\n                            name: airlineName,\r\n                            effect: {\r\n                                show: true,\r\n                                trailWidth: 2,\r\n                                trailLength: 0.15,\r\n                                trailOpacity: 1,\r\n                                trailColor: 'rgb(30, 30, 60)'\r\n                            },\r\n                            lineStyle: {\r\n                                width: 1,\r\n                                color: 'rgb(50, 50, 150)',\r\n                                // color: 'rgb(118, 233, 241)',\r\n                                opacity: 0.1\r\n                            },\r\n                            blendMode: 'lighter',\r\n                            data: routes.map(function (item) {\r\n                                return [airports[item[1]].coord, airports[item[2]].coord];\r\n                            })\r\n                        };\r\n                    })\r\n                    .filter(function (series) {\r\n                        return !!series;\r\n                    });\r\n                series.push({\r\n                    type: 'scatter3D',\r\n                    coordinateSystem: 'globe',\r\n                    blendMode: 'lighter',\r\n                    symbolSize: 2,\r\n                    itemStyle: {\r\n                        color: 'rgb(50, 50, 150)',\r\n                        opacity: 0.2\r\n                    },\r\n                    data: pointsData\r\n                });\r\n                myChart.setOption({\r\n                    legend: {\r\n                        selectedMode: 'single',\r\n                        left: 'left',\r\n                        data: Object.keys(routesGroupByAirline),\r\n                        orient: 'vertical',\r\n                        textStyle: {\r\n                            color: '#fff'\r\n                        }\r\n                    },\r\n                    globe: {\r\n                        environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',\r\n                        heightTexture:\r\n                            ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',\r\n                        displacementScale: 0.1,\r\n                        displacementQuality: 'high',\r\n                        baseColor: '#000',\r\n                        shading: 'realistic',\r\n                        realisticMaterial: {\r\n                            roughness: 0.2,\r\n                            metalness: 0\r\n                        },\r\n                        postEffect: {\r\n                            enable: true,\r\n                            depthOfField: {\r\n                                enable: false,\r\n                                focalDistance: 150\r\n                            }\r\n                        },\r\n                        temporalSuperSampling: {\r\n                            enable: true\r\n                        },\r\n                        light: {\r\n                            ambient: {\r\n                                intensity: 0\r\n                            },\r\n                            main: {\r\n                                intensity: 0.1,\r\n                                shadow: false\r\n                            },\r\n                            ambientCubemap: {\r\n                                texture: ROOT_PATH + '/data-gl/asset/lake.hdr',\r\n                                exposure: 1,\r\n                                diffuseIntensity: 0.5,\r\n                                specularIntensity: 2\r\n                            }\r\n                        },\r\n                        viewControl: {\r\n                            autoRotate: false\r\n                        },\r\n                        silent: true\r\n                    },\r\n                    series: series\r\n                });\r\n                window.addEventListener('keydown', function () {\r\n                    series.forEach(function (series, idx) {\r\n                        myChart.dispatchAction({\r\n                            type: 'lines3DToggleEffect',\r\n                            seriesIndex: idx\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n\r\n            option && myChart.setOption(option);\r\n\r\n        }\r\n        onMounted(()=>{\r\n            chartInit()\r\n        })\r\n\r\n    }\r\n}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}